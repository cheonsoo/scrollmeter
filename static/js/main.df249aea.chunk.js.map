{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["StyledScrollMeterDiv","styled","props","ScrollMeter","scrollDiv","useRef","useState","useEffect","window","setTimer","setTimeout","handleScrollMeter","windowHeight","poz","ratio","color","direction","leftColor","rightColor","console","ref","height","top","duration","debug","Home","style","border","App","ReactDOM","render","document","getElementById"],"mappings":"8PAOMA,E,KAAuBC,EAAH,wJAEdC,YAAK,OAAIA,EAFK,UAGjBA,YAAK,OAAIA,EAHlB,OA4BMC,EAAuCD,YAC3C,IAAME,EAAYC,iBAAlB,MACA,EAA0BC,mBAA1B,yBAAM,EAAN,KAAM,EAAN,KAEAC,qBAAU,WACRC,kCAAkC,WAChC,GACEC,EAASC,YAAW,WAClBD,QACAE,MACCT,EAHHO,gBAHNF,IAWA,IAAMI,EAAoB,WACxB,IAAMC,EAAeJ,oDAAsDA,cAAtDA,YAArB,IACMK,EAAML,OAAZ,QACMM,EAAQD,IAAd,IAEA,GAAIT,EAAJ,QAAuB,CACrB,IAAMW,EAAQ,sBAAH,OAAyBb,EAAMc,UAA/B,aAA6Cd,EAAMe,UAAnD,YAAgEH,EAAhE,cAA2EZ,EAAMgB,WAAjF,YAA+FJ,EAA/F,aAAyG,IAApH,EAAW,MACXV,6BACIF,EAAJ,OACEiB,oCAA6BP,EAA7BO,kBAAmDN,EAAnDM,oBAAkEL,EAAlEK,0BAIN,OAAQ,qBAAsBC,IAAKhB,EAAWiB,OAAQnB,EAAMmB,OAAQC,IAAKpB,EAAMoB,OAGjFnB,eAzC2C,CACzCc,UADyC,0BAEzCC,WAFyC,mBAGzCF,UAHyC,QAIzCO,SAJyC,GAKzCF,OALyC,EAMzCC,IANyC,EAOzCE,OAAO,G,QC5BHC,EAAO,WACX,OACE,6BACE,yBAAKC,MAAO,CAAEL,OAAQ,QAASM,OAAQ,kBAAvC,QACA,yBAAKD,MAAO,CAAEL,OAAQ,QAASM,OAAQ,kBAAvC,QACA,yBAAKD,MAAO,CAAEL,OAAQ,QAASM,OAAQ,kBAAvC,QACA,yBAAKD,MAAO,CAAEL,OAAQ,QAASM,OAAQ,kBAAvC,QACA,yBAAKD,MAAO,CAAEL,OAAQ,QAASM,OAAQ,kBAAvC,UAsBSC,EAjBH,WACV,OAAO,yBAAKF,MAAO,CAAEL,OAAQ,WAE3B,kBAAC,EAAD,CAAaJ,UAAW,QAASC,WAAY,cAAeF,UAAW,QAASO,SAAU,GAAIF,OAAQ,GAAIC,IAAK,GAAIE,OAAO,IAC1H,kBAAC,EAAD,MACA,yBAAKE,MAAO,CAAEL,OAAQ,UAAtB,SAGA,yBAAKK,MAAO,CAAEL,OAAQ,UAAtB,SAGA,yBAAKK,MAAO,CAAEL,OAAQ,UAAtB,WCrBJQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.df249aea.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\ninterface IStyledScrollMeterDiv {\n  height: number | undefined,\n  top: number | undefined\n};\nconst StyledScrollMeterDiv = styled.div<IStyledScrollMeterDiv>`\n  width: 100%;\n  height: ${props => props.height}px;\n  top: ${props => props.top}px;\n  background: transparent;\n  position: sticky;\n  z-index: 2;\n`;\n\ninterface IScrollMeter {\n  leftColor?: string,\n  rightColor?: string,\n  direction?: string,\n  duration?: number,\n  height?: number,\n  top?: number,\n  debug?: boolean\n};\nconst IScrollMeterDefaults: IScrollMeter = {\n  leftColor: 'rgba(60, 112, 150, 0.9)',\n  rightColor: 'rgba(0, 0, 0, 0)',\n  direction: 'right' || 'left' || 'top' || 'bottom',\n  duration: 20,\n  height: 5,\n  top: 0,\n  debug: false\n};\n\nconst ScrollMeter: React.FC<IScrollMeter> = (props) => {\n  const scrollDiv = useRef<HTMLDivElement>(null);\n  const [timer, setTimer] = useState<any>(null);\n\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      if (!timer) {\n        setTimer(setTimeout(function() {\n          setTimer(null);\n          handleScrollMeter();\n        }, props.duration));\n      }\n    });\n  }, []);\n\n  const handleScrollMeter = () => {\n    const windowHeight = window.document.body.getBoundingClientRect().height - window.screen.availHeight + 111;\n    const poz = window.scrollY;\n    const ratio = poz / windowHeight * 100;\n\n    if (scrollDiv.current) {\n      const color = `linear-gradient(to ${props.direction}, ${props.leftColor} ${ratio}%, ${props.rightColor} ${ratio}% ${100 - ratio}%)`;\n      scrollDiv.current.style.background = color;\n      if (props.debug)\n        console.log(`windowHeight: ${windowHeight}, poz: ${poz}, ratio: ${ratio}, color: ${color}`);\n    }\n  };\n\n  return (<StyledScrollMeterDiv ref={scrollDiv} height={props.height} top={props.top} />);\n};\n\nScrollMeter.defaultProps = IScrollMeterDefaults;\n\nexport default ScrollMeter;\n","import React from 'react'\n\nimport ScrollMeter from 'scrollmeter'\n\nconst Home = () => {\n  return (\n    <div>\n      <div style={{ height: '100px', border: '1px solid red' }}>HOME</div>\n      <div style={{ height: '100px', border: '1px solid red' }}>HOME</div>\n      <div style={{ height: '100px', border: '1px solid red' }}>HOME</div>\n      <div style={{ height: '100px', border: '1px solid red' }}>HOME</div>\n      <div style={{ height: '100px', border: '1px solid red' }}>HOME</div>\n    </div>\n  );\n}\n\nconst App = () => {\n  return <div style={{ height: \"3000px\" }}>\n    {/* <ScrollMeter /> */}\n    <ScrollMeter leftColor={'green'} rightColor={'transparent'} direction={'right'} duration={50} height={10} top={50} debug={false} />\n    <Home />\n    <div style={{ height: '500px' }}>\n      test2\n    </div>\n    <div style={{ height: '500px' }}>\n      test3\n    </div>\n    <div style={{ height: '500px' }}>\n      test4\n    </div>\n  </div>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}